#!/bin/bash
# vim: expandtab:tabstop=4:softtabstop=4:autoindent
. "$(dirname "$0")/cliinst-base" || ! echo "Base library not found. Quit." || exit 1
# OFFICAL INSTALLATION PROCESS
# Read the variables in installation-config
### WHAT-THE-FUCK 1
# Why are we loading such thing.. We don't even need such a file (since we rm'ed the file in the beginning
# or echo foo > file.) Shall I split the script into 2 parts and add argument for loading different ones?
# So what the filesystem check do you thing you are writing?

if [ "$u_conf" == y ]; then
    printf "Reading installation configuration..."
    source "$config" && echo -e "\t\t\t${NOTE}[OK]${NORM}" || { 
        echo -e "\t\t\t${ERRO}[FAILED]${NORM}"
        echo -e $"${INFO}Sending you to the config wizard...${NORM}"
        exec cliinst "$@"
    }
fi

# Mount the partition
printf $"Mounting target partition..."
mount $TARGETPART ${target}
check_die

# For you lazy people who do not want to clean your partition...
info_progress $"Deleting all files in the target..."
rm -rf ${target}/*
printf "\t\t\t${NOTE}[OK]${NORM}\n"

# Retrieve latest release
info_progress $"Starting to download list of system releases..."
# Now we use relative path to the repo.anthonos.org HTTP root dir.
wget -O /tmp/LATEST_SYSTEM_TARBALLS "$mirror/os3-releases/LATEST_SYSTEM_TARBALLS"
check_die '' 8
FILE="$(grep $DE /tmp/LATEST_SYSTEM_TARBALLS | grep $PM | head -n 1)"
info_progress $"Chosen"" \`$FILE' ($DE $PM)."

# Download the tarball
info_progress $"Starting to download the system release..."
pushd ${target} > /dev/null
# Automatic mirror for the community.
axel -a $mirror/$FILE
check_die 2 $"Downloading the system release..."
popd > /dev/null

# Extract this buggar
info_progress "Unpacking the system image..."
pushd ${target} > /dev/null
pv $(basename "$FILE") | tar xfJ -
check_die
popd > /dev/null

# Prepare chroot
info_progress $"Preparing system for chroot..."
pushd ${target} > /dev/null
cp /etc/resolv.conf etc/ &&
mount --bind /dev dev &&
mount --bind /proc proc &&
mount --bind /sys sys &&
genfstab -p ${target} >> ${target}/etc/fstab &&
if [ "$EFI" = "yes" ]; then
    mkdir ${target}/efi
    mount $ESP ${target}/efi
fi
check_die '' $(($(infocols $"Preparing system for chroot...")/8))
popd > /dev/null

# Install optional features
info_progress $"Installing optional features..."
if [ "$PM" = "dpkg" ]; then
   if [ ! -z "$OPTPAKS" ]; then
       chroot ${target} apt update --yes &&
       chroot ${target} apt install $OPTPAKS --yes 
   fi
elif [ "$PM" = "rpm" ]; then
   if [ ! -z "$OPTPAKS" ]; then
       chroot ${target} zypper refresh &&
       yes | chroot ${target} zypper install $OPTPAKS 
   fi
else ! echo $"There must be something wrong with the \$PM=$PM variable."
fi
check_die $"Installing optional features..."

# fc-cache ensure
info_progress $"Regenerating system fontconfig cache..."
chroot ${target} fc-cache

# GRUB
info_progress $"Configuring GRUB..."
if [ "$EFI" = "yes" ]; then
    chroot ${target} grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=AOSC-GRUB 
else
    chroot ${target} grub-install ${TARGETPART::-1}
fi
chroot ${target} grub-mkconfig -o /boot/grub/grub.cfg
check_die $"Configuring GRUB..."
clear

# DONE!
echo -e "

$SEP

Installation has successfully completed! Now we will perform some clean up. You may then
reboot your machine and jump right into your fresh installation of AOSC OS.

${PROM}Default username is \e[33m\"aosc\"\e[36m , ${PROM}password is \e[33m\"anthon\"\e[36m ; ${PROM}
Default root password is also \e[33m\"anthon\"\e[36m , ${PROM}although using sudo is recommended.${NORM}

$SEP
"

press_enter

pushd ${target} > /dev/null
umount -Rf dev proc sys
popd > /dev/null
umount -Rf ${target}
# Everyone exits here unless you are sourcing the script. Again, what do youâ€¦
